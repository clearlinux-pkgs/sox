diff --git a/src/rate.c b/src/rate.c
index 9066111..cb39eda 100644
--- a/src/rate.c
+++ b/src/rate.c
@@ -30,8 +30,6 @@
 #include <assert.h>
 #include <string.h>
 
-#define calloc     lsx_calloc
-#define malloc     lsx_malloc
 #define raw_coef_t double
 
 #if 0 /* For float32 version, as used in foobar */
diff --git a/src/xmalloc.h b/src/xmalloc.h
index 9ee77f6..fd512aa 100644
--- a/src/xmalloc.h
+++ b/src/xmalloc.h
@@ -24,11 +24,34 @@
 #include <string.h>
 
 #define lsx_malloc(size) lsx_realloc(NULL, (size))
-#define lsx_calloc(n,s) (((n)*(s))? memset(lsx_malloc((n)*(s)),0,(n)*(s)) : NULL)
-#define lsx_Calloc(v,n)  v = lsx_calloc(n,sizeof(*(v)))
-#define lsx_strdup(p) ((p)? strcpy((char *)lsx_malloc(strlen(p) + 1), p) : NULL)
-#define lsx_memdup(p,s) ((p)? memcpy(lsx_malloc(s), p, s) : NULL)
-#define lsx_valloc(v,n)  v = lsx_malloc((n)*sizeof(*(v)))
-#define lsx_revalloc(v,n)  v = lsx_realloc(v, (n)*sizeof(*(v)))
+#define lsx_calloc(n, s) calloc((size_t)(n), (size_t)(s))
+#define lsx_Calloc(v, n) v = lsx_calloc((n), sizeof(*(v)))
+#define lsx_strdup(s) strdup(s)
+
+static inline void *lsx_memdup(char *origptr, size_t size) {
+  char *newptr;
+
+  if (!origptr)
+    return NULL;
+
+  newptr = lsx_malloc(size);
+  if (!newptr)
+    return NULL;
+
+  return memcpy(newptr, origptr, size);
+}
+
+static inline void *lsx_realloc_array(void *orig, size_t n, size_t size)
+{
+  size_t new_size;
+
+  if (__builtin_mul_overflow(n, size, &new_size))
+    return NULL;
+
+  return lsx_realloc(orig, new_size);
+}
+
+#define lsx_valloc(v, n)   lsx_realloc_array(NULL, (n), sizeof(*(v)))
+#define lsx_revalloc(v, n) lsx_realloc_array((v), (n), sizeof(*(v)))
 
 #endif
